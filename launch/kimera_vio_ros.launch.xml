<launch>
    <!-- General Kimera-VIO-ROS launch file. Change arguments in your own launch
    file and include this one to launch KimeraVIO on the dataset of your choice -->
    <arg name="dataset_name" default="EuRoC"/>
    <!-- If you want to run the pipeline in parallel vs sequential mode -->
    <arg name="parallel" default="true" />
    <!-- If False, parses the given rosbag, otw it plays the rosbage -->
    <arg name="online" default="true" />
    <!-- !!!! VIT !!!! This should be true when running online with a rosbag publishing clock,
    but false when parsing rosbag? Needs rosbag to be publishing clock -->
    <arg name="use_sim_time" default="true"/>

    <!-- If true, SparkVio will log output of all modules to the
    'log_output_path' location. -->
    <arg name="log_output" default="false"/>
    <arg name="log_output_path"
    default="$(find-pkg-share kimera_vio_ros)/output_logs/"/>
    <!-- If true, log ground-truth poses to a csv file using the
    gt_logger_node, and processing data from the gt_topic rostopic -->
    <arg name="log_gt_data" default="false"/>
    <arg name="gt_topic" if="$(var log_gt_data)"
    default="ground_truth_odometry_topic"/>

    <!-- If true, SparkVio will enable the LoopClosureDetector module. -->
    <arg name="use_lcd" default="false"/>

    <!-- Parameters -->
    <!-- each dataset has its own set of parameter files -->
    <!-- the parameters are set in param folder, ordered by the dataset's name -->
    <arg name="params_folder"
    default="$(find-pkg-share kimera_vio_ros)/param/$(var dataset_name)"/>

    <!-- Specify the absolute path to the vocabulary file. -->
    <!-- This is usually in the VIO directory (VIO/vocabulary/ORBvoc.yml). -->
    <!-- <arg name="path_to_vocab" default="$(find-pkg-share kimera_vio)/vocabulary/ORBvoc.yml"/> -->
    <arg name="path_to_vocab" default="/home/ruffsl/ws/spark2/overlay_ws/src/MIT-SPARK/Kimera-VIO/vocabulary/ORBvoc.yml"/>

    <!-- Subscribed Topics -->
    <arg name="left_cam_topic"                    default="/cam0/image_raw"/>
    <arg name="right_cam_topic"                   default="/cam1/image_raw"/>
    <arg name="imu_topic"                         default="/imu0"/>
    <!-- Empty string ("") means no ground-truth available. Used for init if
    requested to do ground-truth initialization. -->
    <arg name="odometry_ground_truth_topic"       default=""/>

    <!-- Frame IDs -->
    <arg name="frame_ids.base_link" default="base_link"/>
    <arg name="frame_ids.map"       default="map"/>
    <arg name="frame_ids.world"     default="world"/>

    <!-- General parameters -->
    <arg name="verbosity"    default="0" />
    <!-- 0: for vanilla VIO, 1: for regular VIO -->
    <arg name="backend_type" default="1" />
    <!-- Visualize pipeline output in OpenCV. -->
    <!-- Note that this is duplicated from the flags file -->
    <arg name="visualize"    default="false" />

    <!-- Launch main node  -->
    <node name="kimera_vio_ros" pkg="kimera_vio_ros" exec="kimera_vio_node"
        output="screen" ns="kimera_vio_ros"
        args="--left_cam_params_path=$(var params_folder)/LeftCameraParams.yaml \
            --right_cam_params_path=$(var params_folder)/RightCameraParams.yaml \
            --imu_params_path=$(var params_folder)/ImuParams.yaml \
            --backend_params_path=$(var params_folder)/regularVioParameters.yaml \
            --frontend_params_path=$(var params_folder)/trackerParameters.yaml \
            --use_lcd=$(var use_lcd) \
            --lcd_params_path=$(var params_folder)/LCDParameters.yaml \
            --vocabulary_path=$(var path_to_vocab) \
            --flagfile=$(var params_folder)/flags/Mesher.flags \
            --flagfile=$(var params_folder)/flags/VioBackEnd.flags \
            --flagfile=$(var params_folder)/flags/RegularVioBackEnd.flags \
            --flagfile=$(var params_folder)/flags/Visualizer3D.flags \
            --logtostderr 1 \
            --colorlogtostderr 1 \
            --log_prefix 1 \
            --v=$(var verbosity) \
            --backend_type=$(var backend_type) \
            --log_output=$(var log_output) \
            --output_path=$(var log_output_path) \
            --visualize=$(var visualize) \
            --parallel_run=$(var parallel)">

        <param name="online_run"        value="$(var online)"/>
        <param name="use_sim_time"      value="$(var use_sim_time)"/>
        <param name="use_lcd"           value="$(var use_lcd)"/>

        <!-- Frame IDs for Odometry -->
        <param name="frame_ids">
            <param name="base_link" value="$(var frame_ids.base_link)"/>
            <param name="map"       value="$(var frame_ids.map)"/>
            <param name="world"     value="$(var frame_ids.world)"/>
        </param>

        <!-- Subscriber topics -->
        <remap from="left_cam"  to="$(var left_cam_topic)"/>
        <remap from="right_cam" to="$(var right_cam_topic)"/>
        <remap from="imu"       to="$(var imu_topic)"/>
        <!-- <remap from="gt_topic"  to="$(var odometry_ground_truth_topic)"
        if="$(eval arg('online') and arg('odometry_ground_truth_topic') != '')"/> -->

        <!-- <param name="ground_truth_odometry_rosbag_topic"
        value="$(var odometry_ground_truth_topic)" unless="$(var online)"/> -->

        <!-- Other subscription topics -->
        <remap from="reinit_flag" to="reinit_flag"/>
        <remap from="reinit_pose" to="reinit_pose"/>

        <!-- Remap publisher topics -->
        <remap from="odometry"                to="odometry"/>
        <remap from="resiliency"              to="resiliency"/>
        <remap from="imu_bias"                to="imu_bias"/>
        <remap from="optimized_trajectory"    to="optimized_trajectory"/>
        <remap from="pose_graph"              to="pose_graph"/>
        <remap from="mesh"                    to="mesh"/>
        <remap from="frontend_stats"          to="frontend_stats"/>
        <remap from="debug_mesh_img"          to="debug_mesh_img"/>
        <remap from="time_horizon_pointcloud" to="time_horizon_pointcloud"/>

        <!-- Resiliency Thresholds: TODO(Sandro) document -->
        <param name="velocity_det_threshold"  value="0.1"/>
        <param name="position_det_threshold"  value="0.3"/>
        <param name="stereo_ransac_threshold" value="20"/>
        <param name="mono_ransac_threshold"   value="30"/>

        <!-- Load calibration -->
        <!-- <rosparam command="load" file="$(var params_folder)/calibration.yaml"/> -->
    </node>

    <!-- Launch visualizer -->
    <!-- <include file="$(find pose_graph_tools)/launch/posegraph_view.launch" >
    <arg name="frame"         value="$(var world_frame_id)" />
    <arg name="graph_topic"   value="pose_graph" />
    <arg name="ns"            value="kimera_vio_ros"/>
    </include> -->

    <!-- Log ground-truth data only if requested-->
    <!-- <node if="$(var log_gt_data)" name="gt_logger_node" pkg="kimera_vio_ros"
    type="gt_logger_node.py" output="screen">
    <param name="gt_topic"   value="$(var gt_topic)"/>
    <param name="output_dir" value="$(var log_output_path)"/>
    </node> -->

    <!-- <node pkg="demo_nodes_cpp" exec="talker"/>
    <node pkg="demo_nodes_cpp" exec="listener"/> -->

</launch>
